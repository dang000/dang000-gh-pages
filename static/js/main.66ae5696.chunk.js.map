{"version":3,"sources":["components/name/Name.js","components/description/Description.js","components/icons/Icons.js","components/Home.js","components/background/Background.js","App.js","serviceWorker.js","index.js"],"names":["Name","className","Description","iconsList","icon","style","fontSize","color","url","icons","map","iconObj","IconButton","onClick","window","open","Home","Icons","Background","params","particles","number","value","density","enable","size","random","anim","speed","size_min","line_linked","move","direction","out_mode","interactivity","events","onhover","mode","onclick","modes","bubble","distance","duration","opacity","repulse","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0VAUeA,G,wBANF,kBACX,6BACE,wBAAIC,UAAU,QAAd,mBCGWC,G,QANK,kBAClB,6BACE,uBAAGD,UAAU,eAAb,uC,kBCAEE,G,QAAY,CAChB,CACEC,KAAM,kBAAC,IAAD,CAAWC,MAAO,CAAEC,SAAU,OAAQC,MAAO,WACnDC,IAAK,8BAEP,CACEJ,KAAM,kBAAC,IAAD,CAAaC,MAAO,CAAEC,SAAU,OAAQC,MAAO,WACrDC,IAAK,uDAEP,CACEJ,KAAM,kBAAC,IAAD,CAAUC,MAAO,CAAEC,SAAU,OAAQC,MAAO,WAClDC,IAAK,oCAmBMC,EAfD,kBACZ,6BACGN,EAAUO,KAAI,SAAAC,GAAO,OACpB,kBAACC,EAAA,EAAD,CACEX,UAAU,QACVY,QAAS,WACPC,OAAOC,KAAKJ,EAAQH,OAGrBG,EAAQP,WCfFY,G,QARF,kBACX,yBAAKf,UAAU,QACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAACgB,EAAD,S,iBCmDWC,EA1DI,kBACjB,6BACE,kBAAC,IAAD,CACEC,OAAQ,CACNC,UAAW,CACTC,OAAQ,CACNC,MAAO,IACPC,QAAS,CACPC,QAAQ,IAGZC,KAAM,CACJH,MAAO,EACPI,QAAQ,EACRC,KAAM,CACJC,MAAO,EACPC,SAAU,KAGdC,YAAa,CACXN,QAAQ,GAEVO,KAAM,CACJL,QAAQ,EACRE,MAAO,EACPI,UAAW,MACXC,SAAU,QAGdC,cAAe,CACbC,OAAQ,CACNC,QAAS,CACPZ,QAAQ,EACRa,KAAM,UAERC,QAAS,CACPd,QAAQ,EACRa,KAAM,YAGVE,MAAO,CACLC,OAAQ,CACNC,SAAU,IACVC,SAAU,EACVjB,KAAM,EACNkB,QAAS,GAEXC,QAAS,CACPH,SAAU,IACVC,SAAU,UCtCTG,MATf,WACE,OACE,yBAAK5C,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGc6C,QACW,cAA7BhC,OAAOiC,SAASC,UAEe,UAA7BlC,OAAOiC,SAASC,UAEhBlC,OAAOiC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.66ae5696.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport \"./Name.css\";\r\n\r\nconst Name = () => (\r\n  <div>\r\n    <h1 className=\"Name\">Anthony Dang</h1>\r\n  </div>\r\n);\r\n\r\nexport default Name;\r\n","import React from \"react\";\r\nimport \"./Description.css\";\r\n\r\nconst Description = () => (\r\n  <div>\r\n    <p className=\"Description\">Computer Science Student At UNSW</p>\r\n  </div>\r\n);\r\n\r\nexport default Description;\r\n","import React from \"react\";\r\nimport { GithubBox, LinkedinBox, EmailBox } from \"mdi-material-ui\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport \"./icons.css\";\r\n\r\nconst iconsList = [\r\n  {\r\n    icon: <GithubBox style={{ fontSize: \"40px\", color: \"white\" }} />,\r\n    url: \"https://github.com/dang000\"\r\n  },\r\n  {\r\n    icon: <LinkedinBox style={{ fontSize: \"40px\", color: \"white\" }} />,\r\n    url: \"https://www.linkedin.com/in/anthony-dang-178a72184/\"\r\n  },\r\n  {\r\n    icon: <EmailBox style={{ fontSize: \"40px\", color: \"white\" }} />,\r\n    url: \"mailto:anthonydang30@gmail.com\"\r\n  }\r\n];\r\n\r\nconst icons = () => (\r\n  <div>\r\n    {iconsList.map(iconObj => (\r\n      <IconButton\r\n        className=\"icons\"\r\n        onClick={() => {\r\n          window.open(iconObj.url);\r\n        }}\r\n      >\r\n        {iconObj.icon}\r\n      </IconButton>\r\n    ))}\r\n  </div>\r\n);\r\n\r\nexport default icons;\r\n","import React from \"react\";\r\nimport Name from \"./name/Name\";\r\nimport Description from \"./description/Description\";\r\nimport Icons from \"./icons/Icons\";\r\nimport \"./Home.css\";\r\n\r\nconst Home = () => (\r\n  <div className=\"Home\">\r\n    <Name />\r\n    <Description />\r\n    <Icons />\r\n  </div>\r\n);\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport Particles from \"react-particles-js\";\r\n\r\nconst Background = () => (\r\n  <div>\r\n    <Particles\r\n      params={{\r\n        particles: {\r\n          number: {\r\n            value: 160,\r\n            density: {\r\n              enable: false\r\n            }\r\n          },\r\n          size: {\r\n            value: 3,\r\n            random: true,\r\n            anim: {\r\n              speed: 4,\r\n              size_min: 0.3\r\n            }\r\n          },\r\n          line_linked: {\r\n            enable: false\r\n          },\r\n          move: {\r\n            random: true,\r\n            speed: 1,\r\n            direction: \"top\",\r\n            out_mode: \"out\"\r\n          }\r\n        },\r\n        interactivity: {\r\n          events: {\r\n            onhover: {\r\n              enable: true,\r\n              mode: \"bubble\"\r\n            },\r\n            onclick: {\r\n              enable: true,\r\n              mode: \"repulse\"\r\n            }\r\n          },\r\n          modes: {\r\n            bubble: {\r\n              distance: 250,\r\n              duration: 2,\r\n              size: 0,\r\n              opacity: 0\r\n            },\r\n            repulse: {\r\n              distance: 400,\r\n              duration: 4\r\n            }\r\n          }\r\n        }\r\n      }}\r\n    />\r\n  </div>\r\n);\r\n\r\nexport default Background;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Home from \"./components/Home.js\";\nimport Background from \"./components/background/Background\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Background />\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}